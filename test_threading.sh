#!/bin/bash

echo "=========================================="
echo "SCDL Multi-Threading Test"
echo "=========================================="
echo ""

# Check if scdl-threaded is available
if ! command -v scdl-threaded &> /dev/null; then
    echo "‚ùå scdl-threaded not found in PATH"
    echo "Adding to current session PATH..."
    export PATH="$HOME/bin:$HOME/Library/Python/3.12/bin:$PATH"
fi

echo "üìç Command location: $(which scdl-threaded)"
echo "üìç Version: $(scdl-threaded --version)"
echo ""

echo "üß™ Testing threading capabilities..."
echo ""
echo "The following changes were made to enable proper multi-threading:"
echo ""
echo "1. ‚úÖ Fixed download_playlist() function to collect all tracks first"
echo "2. ‚úÖ Implemented parallel download using ThreadPoolExecutor for playlists"
echo "3. ‚úÖ Added progress bar with tqdm for concurrent downloads"
echo "4. ‚úÖ Each playlist track now downloads in its own thread"
echo ""
echo "=========================================="
echo "Usage Examples:"
echo "=========================================="
echo ""
echo "# Download a playlist with 5 concurrent threads:"
echo "scdl-threaded -l <playlist_url> --threads 5"
echo ""
echo "# Download user's likes with 10 threads:"
echo "scdl-threaded -l <user_url> -f --threads 10"
echo ""
echo "# Download all user uploads with threading:"
echo "scdl-threaded -l <user_url> -t --threads 8"
echo ""
echo "=========================================="
echo "How it works:"
echo "=========================================="
echo ""
echo "‚Ä¢ Single tracks: Direct download (no threading needed)"
echo "‚Ä¢ Playlists: All tracks download concurrently"
echo "‚Ä¢ Progress: Real-time progress bar shows downloads"
echo "‚Ä¢ Error handling: Continues on failure unless --strict-playlist"
echo ""
echo "To see it in action, try downloading a playlist with --threads flag!"
echo "The console will show 'Downloading X tracks with Y threads' message."
echo ""
echo "=========================================="